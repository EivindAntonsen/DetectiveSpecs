name: .Net

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Extract version
        id: getversion
        run: |
          $xml = [xml](Get-Content DetectiveSpecs/DetectiveSpecs.csproj)
          $version = $xml.Project.PropertyGroup.Version
          Add-Content -Path $env:GITHUB_ENV -Value "VERSION=$version"
        shell: pwsh

      - name: Check version
        run: |
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${env:VERSION}"
          try {
              $versionExists = Invoke-RestMethod -Method Get -Headers @{ Authorization = "Bearer $env:ACCESS_TOKEN" } -Uri $uri
              Write-Output "Version already exists"
              exit 1
          }
          catch {
              if ($_.Exception.Response.StatusCode -eq 404) {
                Write-Output "Version does not exist, safe to continue"
            }
            else {
              throw
            }
          }
        shell: pwsh
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: 8.0.x

      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v2.0.0

      - name: Configure github packages as nuget source
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          $uri = "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
          dotnet nuget add source --username ${{ github.actor }} --password $env:ACCESS_TOKEN --store-password-in-clear-text --name github $uri

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Publish
        run: |
          $project = 'DetectiveSpecs/DetectiveSpecs.csproj'
          $outputDirectory = "${{ runner.workspace }}\Staging\Build"
          
          dotnet publish $project -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true --output $outputDirectory

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DetectiveSpecs
          path: ${{ runner.workspace }}/Staging/Build/

      - name: Create Github Release
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          VERSION: $env:VERSION
        run: pwsh ./.github/scripts/CreateRelease.ps1 -accessToken $env:ACCESS_TOKEN -repository "EivindAntonsen/DetectiveSpecs" -version $env:VERSION
        shell: pwsh

      - name: Upload Release Asset
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          VERSION: $env:VERSION
        run: pwsh ./.github/scripts/UploadRelease.ps1 -accessToken $env:ACCESS_TOKEN -workspace ${{ runner.workspace }} -repository "EivindAntonsen/DetectiveSpecs" -releaseId v$env:VERSION
        shell: pwsh